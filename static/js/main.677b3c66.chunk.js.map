{"version":3,"sources":["Home.tsx","serviceWorker.ts","history.ts","index.tsx"],"names":["Home","props","state","fours","eights","twelves","summary","requiredFours","requiredEights","requiredTwelves","foursPredict","eightsPredict","twelvesPredict","onChange","bind","recalculate","recalculate_predicts","this","e","console","log","target","id","value","setState","className","Navbar","Brand","Toggle","aria-controls","Collapse","Nav","Form","inline","Group","controlId","Label","Control","type","placeholder","toString","Text","React","Component","Boolean","window","location","hostname","match","createBrowserHistory","ReactDOM","render","history","path","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.677b3c66.chunk.js","sourcesContent":["import React from \"react\";\n\nimport {Navbar, Nav, Form} from \"react-bootstrap\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\ntype HomeProps = {\n}\n\ntype HomeState = {\n    fours: number;\n    eights: number;\n    twelves: number;\n    summary: number;\n\n    requiredFours: number;\n    requiredEights: number;\n    requiredTwelves: number;\n\n    foursPredict: number;\n    eightsPredict: number;\n    twelvesPredict: number;\n}\n\n\nclass Home extends React.Component<HomeProps, HomeState> {\n   \n    componentDidMount() {\n        this.recalculate()\n    }\n    \n    onChange(e: any) {\n        console.log(this.state.eights);\n        if (e.target.id == \"fourPortsField\") {\n            console.log(e);\n            if (e.target.value >= 0) {\n                this.setState({fours: e.target.value}, this.recalculate);\n            }\n        }\n\n        if (e.target.id == \"eightPortsField\") {\n            console.log(e);\n            if (e.target.value >= 0) {\n                this.setState({eights: e.target.value}, this.recalculate);\n            }\n        }\n        if (e.target.id == \"twelvePortsField\") {\n            console.log(e);\n            if (e.target.value >= 0) {\n                this.setState({twelves: e.target.value}, this.recalculate);\n            }\n        }\n    }\n\n    recalculate() {\n        this.setState({summary: (this.state.fours / this.state.requiredFours) + (this.state.eights / this.state.requiredEights) + (this.state.twelves / this.state.requiredTwelves)}, this.recalculate_predicts)\n    }\n\n    recalculate_predicts() {\n        this.setState({\n            twelvesPredict: (1 - this.state.summary) * (this.state.requiredTwelves),\n            eightsPredict: (1 - this.state.summary) * (this.state.requiredEights),\n            foursPredict: (1 - this.state.summary) * (this.state.requiredFours),\n        })\n    }\n\n    constructor(props: HomeProps) {\n        super(props);\n\n        this.state = {\n            fours : 0,\n            eights : 0,\n            twelves : 0,\n            summary: 0,\n\n            requiredFours : 190,\n            requiredEights : 165,\n            requiredTwelves : 115,\n\n            foursPredict: 0,\n            eightsPredict: 0,\n            twelvesPredict: 0,\n        }\n \n        this.onChange = this.onChange.bind(this);\n        this.recalculate = this.recalculate.bind(this);\n        this.recalculate_predicts = this.recalculate_predicts.bind(this);\n    }\n\n    \n    render () {\n        return (\n            <div className=\"container-fluid\">\n\t            <Navbar className=\"bg-light\">\n\t                <Navbar.Brand>Kalkulator Norm</Navbar.Brand>\n\t                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n\t                <Navbar.Collapse id=\"basic-navbar-nav\">\n\t                    <Nav className=\"mr-auto\">\n\t                    </Nav>\n\t                    <Form inline>\n\t                    </Form>\n\t                </Navbar.Collapse>\n\t            </Navbar>\n                <Form>\n                    <Form.Group className=\"mb-3\" controlId=\"twelvePortsField\">\n                        <Form.Label>12p ({this.state.requiredTwelves})</Form.Label>\n                        <Form.Control type=\"number\" placeholder={this.state.twelvesPredict.toString()} value={this.state.twelves == 0 ? '' : this.state.twelves} onChange={this.onChange}/>\n                        <Form.Text className=\"text-muted\">\n                            {this.state.twelves / this.state.requiredTwelves * 100}%\n                        </Form.Text>\n                    </Form.Group>\n                    <Form.Group className=\"mb-3\" controlId=\"eightPortsField\">\n                        <Form.Label>8p ({this.state.requiredEights})</Form.Label>\n                        <Form.Control type=\"number\" placeholder={this.state.eightsPredict.toString()} value={this.state.eights == 0 ? '' : this.state.eights} onChange={this.onChange}/>\n                        <Form.Text className=\"text-muted\">\n                            {this.state.eights / this.state.requiredEights * 100}%\n                        </Form.Text>\n                    </Form.Group>\n                    <Form.Group className=\"mb-3\" controlId=\"fourPortsField\">\n                        <Form.Label>4p ({this.state.requiredFours})</Form.Label>\n                        <Form.Control type=\"number\" placeholder={this.state.foursPredict.toString()} value={this.state.fours == 0 ? '' : this.state.fours} onChange={this.onChange}/>\n                        <Form.Text className=\"text-muted\">\n                            {this.state.fours / this.state.requiredFours * 100}%\n                        </Form.Text>\n                    </Form.Group>\n                    <Form.Group className=\"mb-3\" controlId=\"percentageSum\">\n                        <Form.Label>Suma procent</Form.Label>\n                        <Form.Text className=\"text-muted\">\n                            {this.state.summary * 100}%\n                        </Form.Text>\n                    </Form.Group>\n\n                </Form>\n            </div>\n        );\n    }\n};\n\nexport default Home;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n            window.location.href\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n        \n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n            \n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n                \n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n                            \n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n                            \n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                    (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import { createBrowserHistory } from 'history';\n\nexport default createBrowserHistory();\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Router, Switch, Route } from 'react-router-dom';\nimport './index.css';\nimport Home from './Home';\nimport * as serviceWorker from './serviceWorker';\nimport history from './history';\n\nReactDOM.render((\n    <Router history={history}>\n        <Switch>\n\t        <Route path=\"/\">\n\t            <Home />\n\t        </Route>\n        </Switch>\n    </Router>), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}